# -*- coding: utf-8 -*-
"""car_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zwui9U98uj1I_VBBCZxYTi83-B5yc1Os
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Analysis"""

dataset = pd.read_csv('/content/car data.csv')
print(dataset.head())

dataset.shape

dataset.info()

dataset.describe()

# Group By year
year_wise_dataset = dataset.groupby('Year')
year_wise_dataset.first()

# Finding Missing Values
dataset.isnull().sum()

# Distribution of Car_Name
dataset.Car_Name.value_counts()

# Selecting cars with company 'maruti suzuki' and Kms_Driven  < 10000
dataset.loc[(dataset.company == 'maruti suzuki') & (dataset.Kms_Driven < 10000)]

# Distribution of Fuel Type 
dataset.Fuel_Type.value_counts()

# Distribution of Seller_type 
dataset.Seller_Type.value_counts()

# Distribution of Transmission
dataset.Transmission.value_counts()

# Machine Understand Numeric value so enconding Text to Value 
# For Fuel

dataset.replace({'Fuel_Type':{'Petrol':0, 'Diesel':1, 'CNG':2}}, inplace=True)

dataset.head()

# For Seller_Type
dataset.replace({'Seller_Type':{'Dealer':0, 'Individual':1}}, inplace=True)

#Rerive First 5 Entry
dataset.head()

# For Transmission
dataset.replace({'Transmission':{'Manual':0, 'Automatic':1}}, inplace=True)

dataset.head()

# Splitting the Data in to Train and Test - Drop a Columns
X = dataset.drop(['Car_Name', 'company','Selling_Price'],axis=1)
X.head()

# Splitting the Data in to Train and Test - Select Selling Price Column
Y = dataset['Selling_Price']
Y.head()

# Splitting a Data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state=2)
# 10% Test
# 90% Train
print("train test split completed")

"""**Linear Regression**"""

# Train Model
# LinearRegression
lin_reg_mdl = LinearRegression()

lin_reg_mdl.fit(X_train, Y_train)

# Model Evaluation
train_data_pre = lin_reg_mdl.predict(X_train)

# R Square Error - Train Data 
r_sq_err = metrics.r2_score(Y_train, train_data_pre)
print("R Square Error:", r_sq_err)

#Visuliaze actual and predict - Train Data
plt.scatter(Y_train, train_data_pre, color=['blue'])
plt.xlabel("Actual Price ")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted")
plt.show()

"""Test Data"""

test_data_pre = lin_reg_mdl.predict(X_test)
print(test_data_pre)

# R Square Error - Test  [Score is 1 - predicted values are the same as the actual values]
r_sq_err = metrics.r2_score(Y_test, test_data_pre)
print("R Square Error:", r_sq_err)

#Visuliaze actual and predict - Test
plt.scatter(Y_test, test_data_pre, color=['green'])
plt.xlabel("Actual Price ")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted")
plt.show()

"""**Lasso Regression**

Train Data
"""

# Train Model
# Lasso Regression
las_reg_mdl = Lasso()

las_reg_mdl.fit(X_train, Y_train)

# Model Evaluation
train_data_pre = las_reg_mdl.predict(X_train)

# R Square Error - Train Data 
r_sq_err = metrics.r2_score(Y_train, train_data_pre)
print("R Square Error:", r_sq_err)

#Visuliaze actual and predict - Train
plt.scatter(Y_train, train_data_pre)
plt.xlabel("Actual Price ")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted - Lasso (Train)")
plt.show()

"""Test Data"""

test_data_pre = las_reg_mdl.predict(X_test)

# R Square Error - Test  [Score is 1 - predicted values are the same as the actual values]
r_sq_err = metrics.r2_score(Y_test, test_data_pre)
print("R Square Error:", r_sq_err)

#Visuliaze actual and predict - Test
plt.scatter(Y_test, test_data_pre)
plt.xlabel("Actual Price ")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted - Lasso (Test)")
plt.show()
